let a = 0,
    b = 0;

function A(a) {
    A = function (b) {
        alert(a + b++);
    };
    alert(a++);
}
A(1);
A(2);

/*
 * 函数执行会产生一个私有的上下文
 *   @1 保护作用：保护私有上下文中的私有变量不受外界的干扰「防止全局变量污染」
 *   @2 保存作用：一但当前上下文不被释放，上下文中的私有变量及其值都会被保存起来，供其下级上下文调取使用
 * 我们把函数执行产生的这两大作用称之为“闭包”机制「市面上一般都是人为只有产生不被释放的上下文才算闭包」
 */